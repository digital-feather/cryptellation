syntax = "proto3";

option go_package = "/pkg/genproto/backtests";

package backtests;

service BacktestsService {
    rpc CreateBacktest(CreateBacktestRequest) returns (CreateBacktestResponse) {}
    rpc SubscribeToBacktestEvents(SubscribeToBacktestEventsRequest) returns (SubscribeToBacktestEventsResponse){}
    rpc ListenBacktest(stream BacktestEventRequest) returns (stream BacktestEventResponse) {}
    rpc CreateBacktestOrder(CreateBacktestOrderRequest) returns (CreateBacktestOrderResponse) {}
    rpc Accounts(AccountsRequest) returns (AccountsResponse) {}
    rpc Orders(OrdersRequest) returns (OrdersResponse) {}
}

message Account {
    map<string, float> assets = 1;
}

message CreateBacktestRequest {
    map<string, Account> accounts = 1;
	string start_time = 2;
	string end_time = 3;
    uint64 seconds_between_price_events = 4;
}

message CreateBacktestResponse {
    uint64 id = 1;
}

message SubscribeToBacktestEventsRequest {
    uint64 id = 1;
    string exchange_name = 2;
    string pair_symbol = 3;
}

message SubscribeToBacktestEventsResponse{
}

message BacktestEventRequest {
    uint64 id = 1;
}

message BacktestEventResponse {
    string type = 1;
    string time = 2;
    string content = 3;
}

message CreateBacktestOrderRequest {
    uint64 backtest_id = 1;
    string type = 2;
    string exchange_name = 3;
    string pair_symbol = 4;
    string side = 5;
    float quantity = 6;
}

message CreateBacktestOrderResponse {
}

message AccountsRequest {
    uint64 backtest_id = 1;
}

message AccountsResponse {
    map<string, Account> accounts = 1;
}

message OrdersRequest {
    uint64 backtest_id = 1;
}

message Order {
    string time = 1;
    string type = 2;
    string exchange_name = 3;
    string pair_symbol = 4;
    string side = 5;
    float quantity = 6;
    float price = 7;
}

message OrdersResponse {
    repeated Order orders = 1;
}
