// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: exchanges.proto

package exchanges

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangesServiceClient is the client API for ExchangesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangesServiceClient interface {
	ReadExchanges(ctx context.Context, in *ReadExchangesRequest, opts ...grpc.CallOption) (*ReadExchangesResponse, error)
}

type exchangesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangesServiceClient(cc grpc.ClientConnInterface) ExchangesServiceClient {
	return &exchangesServiceClient{cc}
}

func (c *exchangesServiceClient) ReadExchanges(ctx context.Context, in *ReadExchangesRequest, opts ...grpc.CallOption) (*ReadExchangesResponse, error) {
	out := new(ReadExchangesResponse)
	err := c.cc.Invoke(ctx, "/exchanges.ExchangesService/ReadExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangesServiceServer is the server API for ExchangesService service.
// All implementations should embed UnimplementedExchangesServiceServer
// for forward compatibility
type ExchangesServiceServer interface {
	ReadExchanges(context.Context, *ReadExchangesRequest) (*ReadExchangesResponse, error)
}

// UnimplementedExchangesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExchangesServiceServer struct {
}

func (UnimplementedExchangesServiceServer) ReadExchanges(context.Context, *ReadExchangesRequest) (*ReadExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadExchanges not implemented")
}

// UnsafeExchangesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangesServiceServer will
// result in compilation errors.
type UnsafeExchangesServiceServer interface {
	mustEmbedUnimplementedExchangesServiceServer()
}

func RegisterExchangesServiceServer(s grpc.ServiceRegistrar, srv ExchangesServiceServer) {
	s.RegisterService(&ExchangesService_ServiceDesc, srv)
}

func _ExchangesService_ReadExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangesServiceServer).ReadExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchanges.ExchangesService/ReadExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangesServiceServer).ReadExchanges(ctx, req.(*ReadExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangesService_ServiceDesc is the grpc.ServiceDesc for ExchangesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchanges.ExchangesService",
	HandlerType: (*ExchangesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadExchanges",
			Handler:    _ExchangesService_ReadExchanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchanges.proto",
}
