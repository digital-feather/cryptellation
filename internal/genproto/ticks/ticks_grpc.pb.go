// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ticks.proto

package ticks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicksServiceClient is the client API for TicksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicksServiceClient interface {
	ListenSymbol(ctx context.Context, in *ListenSymbolRequest, opts ...grpc.CallOption) (TicksService_ListenSymbolClient, error)
}

type ticksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicksServiceClient(cc grpc.ClientConnInterface) TicksServiceClient {
	return &ticksServiceClient{cc}
}

func (c *ticksServiceClient) ListenSymbol(ctx context.Context, in *ListenSymbolRequest, opts ...grpc.CallOption) (TicksService_ListenSymbolClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicksService_ServiceDesc.Streams[0], "/ticks.TicksService/ListenSymbol", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticksServiceListenSymbolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicksService_ListenSymbolClient interface {
	Recv() (*Tick, error)
	grpc.ClientStream
}

type ticksServiceListenSymbolClient struct {
	grpc.ClientStream
}

func (x *ticksServiceListenSymbolClient) Recv() (*Tick, error) {
	m := new(Tick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicksServiceServer is the server API for TicksService service.
// All implementations should embed UnimplementedTicksServiceServer
// for forward compatibility
type TicksServiceServer interface {
	ListenSymbol(*ListenSymbolRequest, TicksService_ListenSymbolServer) error
}

// UnimplementedTicksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTicksServiceServer struct {
}

func (UnimplementedTicksServiceServer) ListenSymbol(*ListenSymbolRequest, TicksService_ListenSymbolServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenSymbol not implemented")
}

// UnsafeTicksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicksServiceServer will
// result in compilation errors.
type UnsafeTicksServiceServer interface {
	mustEmbedUnimplementedTicksServiceServer()
}

func RegisterTicksServiceServer(s grpc.ServiceRegistrar, srv TicksServiceServer) {
	s.RegisterService(&TicksService_ServiceDesc, srv)
}

func _TicksService_ListenSymbol_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenSymbolRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicksServiceServer).ListenSymbol(m, &ticksServiceListenSymbolServer{stream})
}

type TicksService_ListenSymbolServer interface {
	Send(*Tick) error
	grpc.ServerStream
}

type ticksServiceListenSymbolServer struct {
	grpc.ServerStream
}

func (x *ticksServiceListenSymbolServer) Send(m *Tick) error {
	return x.ServerStream.SendMsg(m)
}

// TicksService_ServiceDesc is the grpc.ServiceDesc for TicksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticks.TicksService",
	HandlerType: (*TicksServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenSymbol",
			Handler:       _TicksService_ListenSymbol_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticks.proto",
}
