// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: livetests.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets map[string]float32 `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAssets() map[string]float32 {
	if x != nil {
		return x.Assets
	}
	return nil
}

type CreateLivetestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts map[string]*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateLivetestRequest) Reset() {
	*x = CreateLivetestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLivetestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLivetestRequest) ProtoMessage() {}

func (x *CreateLivetestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLivetestRequest.ProtoReflect.Descriptor instead.
func (*CreateLivetestRequest) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLivetestRequest) GetAccounts() map[string]*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CreateLivetestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateLivetestResponse) Reset() {
	*x = CreateLivetestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLivetestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLivetestResponse) ProtoMessage() {}

func (x *CreateLivetestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLivetestResponse.ProtoReflect.Descriptor instead.
func (*CreateLivetestResponse) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{2}
}

func (x *CreateLivetestResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubscribeToLivetestEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeName string `protobuf:"bytes,2,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	PairSymbol   string `protobuf:"bytes,3,opt,name=pair_symbol,json=pairSymbol,proto3" json:"pair_symbol,omitempty"`
}

func (x *SubscribeToLivetestEventsRequest) Reset() {
	*x = SubscribeToLivetestEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToLivetestEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToLivetestEventsRequest) ProtoMessage() {}

func (x *SubscribeToLivetestEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToLivetestEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToLivetestEventsRequest) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeToLivetestEventsRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscribeToLivetestEventsRequest) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *SubscribeToLivetestEventsRequest) GetPairSymbol() string {
	if x != nil {
		return x.PairSymbol
	}
	return ""
}

type SubscribeToLivetestEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToLivetestEventsResponse) Reset() {
	*x = SubscribeToLivetestEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToLivetestEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToLivetestEventsResponse) ProtoMessage() {}

func (x *SubscribeToLivetestEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToLivetestEventsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToLivetestEventsResponse) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{4}
}

type LivetestEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LivetestEventRequest) Reset() {
	*x = LivetestEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivetestEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivetestEventRequest) ProtoMessage() {}

func (x *LivetestEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivetestEventRequest.ProtoReflect.Descriptor instead.
func (*LivetestEventRequest) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{5}
}

type LivetestEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Time    string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *LivetestEventResponse) Reset() {
	*x = LivetestEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livetests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivetestEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivetestEventResponse) ProtoMessage() {}

func (x *LivetestEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livetests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivetestEventResponse.ProtoReflect.Descriptor instead.
func (*LivetestEventResponse) Descriptor() ([]byte, []int) {
	return file_livetests_proto_rawDescGZIP(), []int{6}
}

func (x *LivetestEventResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LivetestEventResponse) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *LivetestEventResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_livetests_proto protoreflect.FileDescriptor

var file_livetests_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x1a, 0x4f, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x20, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x59, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0xc0, 0x02,
	0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x24, 0x5a, 0x22, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x69,
	0x76, 0x65, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livetests_proto_rawDescOnce sync.Once
	file_livetests_proto_rawDescData = file_livetests_proto_rawDesc
)

func file_livetests_proto_rawDescGZIP() []byte {
	file_livetests_proto_rawDescOnce.Do(func() {
		file_livetests_proto_rawDescData = protoimpl.X.CompressGZIP(file_livetests_proto_rawDescData)
	})
	return file_livetests_proto_rawDescData
}

var file_livetests_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_livetests_proto_goTypes = []interface{}{
	(*Account)(nil),                           // 0: livetests.Account
	(*CreateLivetestRequest)(nil),             // 1: livetests.CreateLivetestRequest
	(*CreateLivetestResponse)(nil),            // 2: livetests.CreateLivetestResponse
	(*SubscribeToLivetestEventsRequest)(nil),  // 3: livetests.SubscribeToLivetestEventsRequest
	(*SubscribeToLivetestEventsResponse)(nil), // 4: livetests.SubscribeToLivetestEventsResponse
	(*LivetestEventRequest)(nil),              // 5: livetests.LivetestEventRequest
	(*LivetestEventResponse)(nil),             // 6: livetests.LivetestEventResponse
	nil,                                       // 7: livetests.Account.AssetsEntry
	nil,                                       // 8: livetests.CreateLivetestRequest.AccountsEntry
}
var file_livetests_proto_depIdxs = []int32{
	7, // 0: livetests.Account.assets:type_name -> livetests.Account.AssetsEntry
	8, // 1: livetests.CreateLivetestRequest.accounts:type_name -> livetests.CreateLivetestRequest.AccountsEntry
	0, // 2: livetests.CreateLivetestRequest.AccountsEntry.value:type_name -> livetests.Account
	1, // 3: livetests.LivetestsService.CreateLivetest:input_type -> livetests.CreateLivetestRequest
	3, // 4: livetests.LivetestsService.SubscribeToLivetestEvents:input_type -> livetests.SubscribeToLivetestEventsRequest
	5, // 5: livetests.LivetestsService.ListenLivetest:input_type -> livetests.LivetestEventRequest
	2, // 6: livetests.LivetestsService.CreateLivetest:output_type -> livetests.CreateLivetestResponse
	4, // 7: livetests.LivetestsService.SubscribeToLivetestEvents:output_type -> livetests.SubscribeToLivetestEventsResponse
	6, // 8: livetests.LivetestsService.ListenLivetest:output_type -> livetests.LivetestEventResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_livetests_proto_init() }
func file_livetests_proto_init() {
	if File_livetests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_livetests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLivetestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLivetestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToLivetestEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToLivetestEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivetestEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livetests_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivetestEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livetests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_livetests_proto_goTypes,
		DependencyIndexes: file_livetests_proto_depIdxs,
		MessageInfos:      file_livetests_proto_msgTypes,
	}.Build()
	File_livetests_proto = out.File
	file_livetests_proto_rawDesc = nil
	file_livetests_proto_goTypes = nil
	file_livetests_proto_depIdxs = nil
}
