# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protobuf import backtests_pb2 as protobuf_dot_backtests__pb2


class BacktestsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBacktest = channel.unary_unary(
                '/backtests.BacktestsService/CreateBacktest',
                request_serializer=protobuf_dot_backtests__pb2.CreateBacktestRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.CreateBacktestResponse.FromString,
                )
        self.SubscribeToBacktestEvents = channel.unary_unary(
                '/backtests.BacktestsService/SubscribeToBacktestEvents',
                request_serializer=protobuf_dot_backtests__pb2.SubscribeToBacktestEventsRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.SubscribeToBacktestEventsResponse.FromString,
                )
        self.ListenBacktest = channel.unary_stream(
                '/backtests.BacktestsService/ListenBacktest',
                request_serializer=protobuf_dot_backtests__pb2.ListenBacktestRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.Event.FromString,
                )
        self.AdvanceBacktest = channel.unary_unary(
                '/backtests.BacktestsService/AdvanceBacktest',
                request_serializer=protobuf_dot_backtests__pb2.AdvanceBacktestRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.AdvanceBacktestResponse.FromString,
                )
        self.CreateBacktestOrder = channel.unary_unary(
                '/backtests.BacktestsService/CreateBacktestOrder',
                request_serializer=protobuf_dot_backtests__pb2.CreateBacktestOrderRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.CreateBacktestOrderResponse.FromString,
                )
        self.Accounts = channel.unary_unary(
                '/backtests.BacktestsService/Accounts',
                request_serializer=protobuf_dot_backtests__pb2.AccountsRequest.SerializeToString,
                response_deserializer=protobuf_dot_backtests__pb2.AccountsResponse.FromString,
                )


class BacktestsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateBacktest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToBacktestEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenBacktest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdvanceBacktest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBacktestOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BacktestsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBacktest': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBacktest,
                    request_deserializer=protobuf_dot_backtests__pb2.CreateBacktestRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.CreateBacktestResponse.SerializeToString,
            ),
            'SubscribeToBacktestEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeToBacktestEvents,
                    request_deserializer=protobuf_dot_backtests__pb2.SubscribeToBacktestEventsRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.SubscribeToBacktestEventsResponse.SerializeToString,
            ),
            'ListenBacktest': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenBacktest,
                    request_deserializer=protobuf_dot_backtests__pb2.ListenBacktestRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.Event.SerializeToString,
            ),
            'AdvanceBacktest': grpc.unary_unary_rpc_method_handler(
                    servicer.AdvanceBacktest,
                    request_deserializer=protobuf_dot_backtests__pb2.AdvanceBacktestRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.AdvanceBacktestResponse.SerializeToString,
            ),
            'CreateBacktestOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBacktestOrder,
                    request_deserializer=protobuf_dot_backtests__pb2.CreateBacktestOrderRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.CreateBacktestOrderResponse.SerializeToString,
            ),
            'Accounts': grpc.unary_unary_rpc_method_handler(
                    servicer.Accounts,
                    request_deserializer=protobuf_dot_backtests__pb2.AccountsRequest.FromString,
                    response_serializer=protobuf_dot_backtests__pb2.AccountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'backtests.BacktestsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BacktestsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateBacktest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backtests.BacktestsService/CreateBacktest',
            protobuf_dot_backtests__pb2.CreateBacktestRequest.SerializeToString,
            protobuf_dot_backtests__pb2.CreateBacktestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToBacktestEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backtests.BacktestsService/SubscribeToBacktestEvents',
            protobuf_dot_backtests__pb2.SubscribeToBacktestEventsRequest.SerializeToString,
            protobuf_dot_backtests__pb2.SubscribeToBacktestEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenBacktest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/backtests.BacktestsService/ListenBacktest',
            protobuf_dot_backtests__pb2.ListenBacktestRequest.SerializeToString,
            protobuf_dot_backtests__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdvanceBacktest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backtests.BacktestsService/AdvanceBacktest',
            protobuf_dot_backtests__pb2.AdvanceBacktestRequest.SerializeToString,
            protobuf_dot_backtests__pb2.AdvanceBacktestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBacktestOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backtests.BacktestsService/CreateBacktestOrder',
            protobuf_dot_backtests__pb2.CreateBacktestOrderRequest.SerializeToString,
            protobuf_dot_backtests__pb2.CreateBacktestOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Accounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backtests.BacktestsService/Accounts',
            protobuf_dot_backtests__pb2.AccountsRequest.SerializeToString,
            protobuf_dot_backtests__pb2.AccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
